{"version":3,"sources":["../src/CalendarDay.tsx","../src/CalendarNavigation.tsx","../src/CalendarGrid.tsx","../src/useGrid.ts","../src/constants.ts","../src/CalendarWeekHeader.tsx","../src/Calendar.tsx","../src/utils.ts","../src/useControllableState.ts","../src/DatePickerCalendar.tsx","../src/DateRangePickerCalendar.tsx","../src/Popover.tsx","../src/DatePicker.tsx","../src/useDateInput.ts","../src/useDetectTouch.ts","../src/useOutsideClickHandler.ts","../src/DateRangePicker.tsx"],"sourcesContent":["import React, { MouseEvent, TouchEvent } from 'react'\nimport { getDate, format, isToday, Locale } from 'date-fns'\nimport classNames from 'classnames'\n\nconst defaultModifiersClassNames = {\n  today: '-today',\n  outside: '-outside',\n  wide: '-wide',\n  disabled: '-disabled',\n  selected: '-selected',\n  selectedStart: '-selected-start',\n  selectedMiddle: '-selected-middle',\n  selectedEnd: '-selected-end'\n}\n\nexport interface CalendarDayProps {\n  date: Date\n  height: number\n  locale: Locale\n  modifiers?: Record<string, boolean>\n  modifiersClassNames?: Record<string, string>\n  onClick?: (date: Date) => void\n  onHover?: (date: Date | null) => void\n}\n\nconst defaultModifiers: Record<string, boolean> = {}\nconst defaultEventHandler = () => {}\n\nexport function CalendarDay({\n  date,\n  height,\n  locale,\n  modifiers: receivedModifiers = defaultModifiers,\n  modifiersClassNames: receivedModifiersClassNames,\n  onClick = defaultEventHandler,\n  onHover = defaultEventHandler\n}: CalendarDayProps): React.JSX.Element {\n  const dayOfMonth = getDate(date)\n  const modifiers: Record<string, boolean> = {\n    today: isToday(date),\n    ...receivedModifiers\n  }\n  const modifiersClassNames: Record<string, string> = {\n    ...defaultModifiersClassNames,\n    ...receivedModifiersClassNames\n  }\n\n  const dayClassNames = Object.fromEntries(\n    Object.entries(modifiers).map(([name, modifier]) => [\n      modifiersClassNames[name] as string,\n      modifier\n    ])\n  )\n\n  const handleClick = (event: MouseEvent | TouchEvent) => {\n    onClick(date)\n    event.preventDefault()\n  }\n\n  const handleMouseEnter = () => onHover(date)\n  const handleMouseLeave = () => onHover(null)\n\n  return (\n    <span\n      className={classNames('nice-dates-day', dayClassNames)}\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onTouchEnd={handleClick}\n      style={{ height }}\n    >\n      {dayOfMonth === 1 && (\n        <span className='nice-dates-day_month'>{format(date, 'LLL', { locale })}</span>\n      )}\n      <span className='nice-dates-day_date'>{dayOfMonth}</span>\n    </span>\n  )\n}\n","import { MouseEvent, TouchEvent } from 'react'\nimport classNames from 'classnames'\nimport { addMonths, getYear, startOfMonth, subMonths, format, isSameMonth, Locale } from 'date-fns'\n\nexport interface CalendarNavigationProps {\n  locale: Locale\n  month: Date\n  minimumDate?: Date | null\n  maximumDate?: Date | null\n  onMonthChange: (month: Date) => void\n}\n\nexport function CalendarNavigation({\n  locale,\n  month,\n  minimumDate = null,\n  maximumDate = null,\n  onMonthChange\n}: CalendarNavigationProps): React.JSX.Element {\n  const handlePrevious = (event: MouseEvent<HTMLAnchorElement> | TouchEvent<HTMLAnchorElement>) => {\n    onMonthChange(startOfMonth(subMonths(month, 1)))\n    event.preventDefault()\n  }\n\n  const handleNext = (event: MouseEvent<HTMLAnchorElement> | TouchEvent<HTMLAnchorElement>) => {\n    onMonthChange(startOfMonth(addMonths(month, 1)))\n    event.preventDefault()\n  }\n\n  return (\n    <div className='nice-dates-navigation'>\n      <a\n        className={classNames('nice-dates-navigation_previous', {\n          '-disabled': minimumDate != null && isSameMonth(month, minimumDate)\n        })}\n        onClick={handlePrevious}\n        onTouchEnd={handlePrevious}\n      />\n\n      <span className='nice-dates-navigation_current'>\n        {format(month, getYear(month) === getYear(new Date()) ? 'LLLL' : 'LLLL yyyy', { locale })}\n      </span>\n\n      <a\n        className={classNames('nice-dates-navigation_next', {\n          '-disabled': maximumDate != null && isSameMonth(month, maximumDate)\n        })}\n        onClick={handleNext}\n        onTouchEnd={handleNext}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { eachDayOfInterval, isSameMonth, lightFormat, startOfMonth, Locale } from 'date-fns'\nimport classNames from 'classnames'\nimport { useGrid } from './useGrid'\nimport { ORIGIN_BOTTOM, ORIGIN_TOP } from './constants'\nimport { CalendarDay } from './CalendarDay'\nimport { ModifierMatcher, Modifiers, ModifiersClassNames } from './types'\n\nfunction computeModifiers<TKey extends string>(\n  modifiers: Record<TKey, ModifierMatcher>,\n  date: Date\n): Record<TKey, boolean> {\n  return Object.fromEntries(\n    Object.entries(modifiers as Record<string, ModifierMatcher>).map(([key, modifierMatcher]) => [\n      key,\n      modifierMatcher(date)\n    ])\n  ) as Record<TKey, boolean>\n}\n\nexport interface CalendarGridProps {\n  locale: Locale\n  month: Date\n  modifiers?: Modifiers\n  modifiersClassNames?: ModifiersClassNames\n  onMonthChange: (month: Date) => void\n  onDayHover?: (date: Date | null) => void\n  onDayClick?: (date: Date) => void\n  transitionDuration?: number\n  touchDragEnabled?: boolean\n}\n\nconst defaultModifiers: Modifiers = {}\n\nexport function CalendarGrid({\n  locale,\n  month,\n  modifiers = defaultModifiers,\n  modifiersClassNames,\n  onMonthChange,\n  onDayHover,\n  onDayClick,\n  transitionDuration = 500,\n  touchDragEnabled = true\n}: CalendarGridProps): React.JSX.Element {\n  const {\n    startDate,\n    endDate,\n    cellHeight,\n    containerElementRef,\n    isWide,\n    offset,\n    origin,\n    transition\n  } = useGrid<HTMLDivElement>({\n    locale,\n    month: startOfMonth(month),\n    onMonthChange,\n    transitionDuration,\n    touchDragEnabled\n  })\n\n  const days = eachDayOfInterval({\n    start: startDate,\n    end: endDate\n  }).map(date => {\n    return (\n      <CalendarDay\n        date={date}\n        height={cellHeight}\n        key={lightFormat(date, 'yyyy-MM-dd')}\n        locale={locale}\n        modifiers={{\n          ...computeModifiers(modifiers, date),\n          outside: !isSameMonth(date, month),\n          wide: isWide\n        }}\n        modifiersClassNames={modifiersClassNames}\n        onHover={onDayHover}\n        onClick={onDayClick}\n      />\n    )\n  })\n\n  return (\n    <div className='nice-dates-grid' style={{ height: cellHeight * 6 }}>\n      <div\n        className={classNames('nice-dates-grid_container', {\n          '-moving': offset,\n          '-origin-bottom': origin === ORIGIN_BOTTOM,\n          '-origin-top': origin === ORIGIN_TOP,\n          '-transition': transition\n        })}\n        ref={containerElementRef}\n        style={{\n          transform: `translate3d(0, ${String(offset)}px, 0)`,\n          transitionDuration: `${String(transitionDuration)}ms`\n        }}\n      >\n        {days}\n      </div>\n    </div>\n  )\n}\n","import { useRef, useLayoutEffect, useEffect, useReducer } from 'react'\nimport {\n  addMonths,\n  addWeeks,\n  differenceInCalendarMonths,\n  differenceInCalendarWeeks,\n  endOfMonth,\n  endOfWeek,\n  isAfter,\n  isBefore,\n  isSameMonth,\n  Locale,\n  startOfMonth,\n  startOfWeek,\n  subMonths\n} from 'date-fns'\nimport { ORIGIN_BOTTOM, ORIGIN_TOP } from './constants'\n\nconst rowsBetweenDates = (startDate: Date, endDate: Date, locale?: Locale) =>\n  differenceInCalendarWeeks(endDate, startDate, { locale }) + 1\nconst rowsInMonth = (date: Date, locale?: Locale) =>\n  rowsBetweenDates(startOfMonth(date), endOfMonth(date), locale)\nconst getStartDate = (date: Date, locale?: Locale) => startOfWeek(startOfMonth(date), { locale })\nconst getEndDate = (date: Date, locale?: Locale) =>\n  endOfWeek(addWeeks(endOfMonth(date), 6 - rowsInMonth(date, locale)), {\n    locale\n  })\n\ninterface GridState {\n  startDate: Date\n  endDate: Date\n  cellHeight: number\n  lastCurrentMonth: Date\n  offset: number\n  origin: string\n  transition: boolean\n  isWide: boolean\n  locale: Locale\n}\n\nconst createInitialState = (currentMonth: Date, locale: Locale): GridState => {\n  return {\n    startDate: getStartDate(currentMonth, locale),\n    endDate: getEndDate(currentMonth, locale),\n    cellHeight: 0,\n    isWide: false,\n    lastCurrentMonth: currentMonth,\n    locale,\n    offset: 0,\n    origin: ORIGIN_TOP,\n    transition: false\n  }\n}\n\ntype GridAction =\n  | { type: 'setStartDate'; value: Date }\n  | { type: 'setEndDate'; value: Date }\n  | { type: 'setRange'; startDate: Date; endDate: Date }\n  | { type: 'setCellHeight'; value: number }\n  | { type: 'setIsWide'; value: boolean }\n  | { type: 'reset'; currentMonth: Date }\n  | { type: 'transitionToCurrentMonth'; currentMonth: Date }\n\nconst reducer = (state: GridState, action: GridAction): GridState => {\n  switch (action.type) {\n    case 'setStartDate':\n      return { ...state, startDate: action.value }\n    case 'setEndDate':\n      return { ...state, endDate: action.value }\n    case 'setRange':\n      return { ...state, startDate: action.startDate, endDate: action.endDate }\n    case 'setCellHeight':\n      return { ...state, cellHeight: action.value }\n    case 'setIsWide':\n      return { ...state, isWide: action.value }\n    case 'reset':\n      return {\n        ...createInitialState(action.currentMonth, state.locale),\n        cellHeight: state.cellHeight,\n        isWide: state.isWide\n      }\n    case 'transitionToCurrentMonth': {\n      const { currentMonth } = action\n      const { lastCurrentMonth, startDate, endDate, cellHeight } = state\n\n      const newState = {\n        ...state,\n        lastCurrentMonth: currentMonth,\n        transition: true\n      }\n\n      if (isAfter(currentMonth, lastCurrentMonth)) {\n        const offset = -(rowsBetweenDates(startDate, currentMonth, state.locale) - 1) * cellHeight\n\n        return {\n          ...newState,\n          endDate: getEndDate(currentMonth, state.locale),\n          offset,\n          origin: ORIGIN_TOP\n        }\n      } else if (isBefore(currentMonth, lastCurrentMonth)) {\n        const gridHeight = cellHeight * 6\n        const offset =\n          rowsBetweenDates(currentMonth, endDate, state.locale) * cellHeight - gridHeight\n\n        return {\n          ...newState,\n          startDate: getStartDate(currentMonth, state.locale),\n          offset,\n          origin: ORIGIN_BOTTOM\n        }\n      }\n\n      return state\n    }\n    default:\n      throw new Error(`Unknown ${(action as GridAction).type} action type`)\n  }\n}\n\nexport type UseGridProps = {\n  locale: Locale\n  month: Date\n  onMonthChange: (month: Date) => void\n  transitionDuration?: number\n  touchDragEnabled?: boolean\n}\n\nexport interface UseGridReturn<TRef extends HTMLElement> {\n  startDate: Date\n  endDate: Date\n  cellHeight: number\n  containerElementRef: React.RefObject<TRef>\n  offset: number\n  origin: string\n  transition: boolean\n  isWide: boolean\n}\n\nexport function useGrid<TRef extends HTMLElement = HTMLElement>({\n  locale,\n  month: currentMonth,\n  onMonthChange,\n  transitionDuration,\n  touchDragEnabled\n}: UseGridProps): UseGridReturn<TRef> {\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>(undefined)\n  const containerElementRef = useRef<TRef>(null)\n  const initialDragPositionRef = useRef(0)\n  const [\n    { startDate, endDate, cellHeight, lastCurrentMonth, offset, origin, transition, isWide },\n    dispatch\n  ] = useReducer(reducer, createInitialState(currentMonth, locale))\n\n  useLayoutEffect(() => {\n    const notDragging = !initialDragPositionRef.current\n\n    if (!isSameMonth(lastCurrentMonth, currentMonth) && notDragging) {\n      const containerElement = containerElementRef.current\n      containerElement?.classList.add('-transition')\n      clearTimeout(timeoutRef.current)\n\n      if (Math.abs(differenceInCalendarMonths(currentMonth, lastCurrentMonth)) <= 3) {\n        dispatch({ type: 'transitionToCurrentMonth', currentMonth })\n\n        timeoutRef.current = setTimeout(\n          () => dispatch({ type: 'reset', currentMonth }),\n          transitionDuration\n        )\n      } else {\n        dispatch({ type: 'reset', currentMonth })\n      }\n    }\n  }, [currentMonth])\n\n  useLayoutEffect(() => {\n    if (!touchDragEnabled) {\n      return\n    }\n\n    const containerElement = containerElementRef.current\n    const gridHeight = cellHeight * 6\n    const halfGridHeight = gridHeight / 2\n\n    if (containerElement) {\n      const handleDragStart = (event: TouchEvent) => {\n        clearTimeout(timeoutRef.current)\n        const computedOffset = Number(\n          window.getComputedStyle(containerElement).transform.match(/([-+]?[\\d.]+)/g)?.[5]\n        )\n        let currentMonthPosition = 0\n\n        if (!initialDragPositionRef.current) {\n          const newStartDate = getStartDate(subMonths(currentMonth, 1), locale)\n          currentMonthPosition =\n            (rowsBetweenDates(newStartDate, currentMonth, locale) - 1) * cellHeight\n          dispatch({\n            type: 'setRange',\n            startDate: newStartDate,\n            endDate: getEndDate(addMonths(currentMonth, 1), locale)\n          })\n        }\n\n        if (!event.touches[0]) {\n          return\n        }\n        containerElement.style.transform = `translate3d(0, ${String(\n          computedOffset || -currentMonthPosition\n        )}px, 0)`\n        containerElement.classList.remove('-transition')\n        containerElement.classList.add('-moving')\n        initialDragPositionRef.current =\n          event.touches[0].clientY + (-computedOffset || currentMonthPosition)\n      }\n\n      const handleDrag = (event: TouchEvent) => {\n        if (!event.touches[0]) {\n          return\n        }\n        const initialDragPosition = initialDragPositionRef.current\n        const dragOffset = event.touches[0].clientY - initialDragPosition\n        const previousMonth = subMonths(currentMonth, 1)\n        const previousMonthPosition =\n          (rowsBetweenDates(startDate, previousMonth, locale) - 1) * cellHeight\n        const currentMonthPosition =\n          (rowsBetweenDates(startDate, currentMonth, locale) - 1) * cellHeight\n        const nextMonth = addMonths(currentMonth, 1)\n        const nextMonthPosition = (rowsBetweenDates(startDate, nextMonth, locale) - 1) * cellHeight\n\n        if (dragOffset < 0) {\n          if (\n            Math.abs(dragOffset) > currentMonthPosition &&\n            isBefore(endDate, addMonths(currentMonth, 2))\n          ) {\n            dispatch({\n              type: 'setEndDate',\n              value: getEndDate(nextMonth, locale)\n            })\n          }\n        } else if (dragOffset > 0) {\n          const newStartDate = getStartDate(previousMonth, locale)\n          const newCurrentMonthPosition =\n            (rowsBetweenDates(newStartDate, currentMonth, locale) - 1) * cellHeight\n          initialDragPositionRef.current += newCurrentMonthPosition\n          dispatch({ type: 'setStartDate', value: newStartDate })\n        }\n\n        const shouldChangeToNextMonth = Math.abs(dragOffset) > nextMonthPosition - halfGridHeight\n        const shouldChangeToPreviousMonth =\n          Math.abs(dragOffset) > previousMonthPosition - halfGridHeight &&\n          Math.abs(dragOffset) < currentMonthPosition - halfGridHeight\n\n        if (shouldChangeToNextMonth) {\n          onMonthChange(nextMonth)\n        } else if (shouldChangeToPreviousMonth) {\n          onMonthChange(previousMonth)\n        }\n\n        containerElement.style.transform = `translate3d(0, ${String(dragOffset)}px, 0)`\n        event.preventDefault()\n      }\n\n      const handleDragEnd = (event: TouchEvent) => {\n        const currentMonthPosition =\n          (rowsBetweenDates(startDate, currentMonth, locale) - 1) * cellHeight\n        containerElement.style.transform = `translate3d(0, ${String(-currentMonthPosition)}px, 0)`\n        containerElement.classList.add('-transition')\n        containerElement.classList.remove('-moving')\n\n        timeoutRef.current = setTimeout(() => {\n          initialDragPositionRef.current = 0\n          containerElement.style.transform = 'translate3d(0, 0, 0)'\n          containerElement.classList.remove('-transition')\n          dispatch({ type: 'reset', currentMonth: currentMonth })\n        }, transitionDuration)\n\n        if (\n          event.changedTouches[0] &&\n          Math.abs(\n            initialDragPositionRef.current - currentMonthPosition - event.changedTouches[0].clientY\n          ) > 10\n        ) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n      }\n\n      containerElement.addEventListener('touchstart', handleDragStart, {\n        passive: true\n      })\n      containerElement.addEventListener('touchmove', handleDrag, {\n        passive: false\n      })\n      containerElement.addEventListener('touchend', handleDragEnd, {\n        passive: false\n      })\n\n      return () => {\n        containerElement.removeEventListener('touchstart', handleDragStart)\n        containerElement.removeEventListener('touchmove', handleDrag)\n        containerElement.removeEventListener('touchend', handleDragEnd)\n      }\n    }\n  })\n\n  useEffect(() => {\n    const handleResize = () => {\n      const containerElement = containerElementRef.current\n      if (!containerElement) {\n        return\n      }\n\n      const containerWidth = containerElement.offsetWidth\n      const cellWidth = containerWidth / 7\n      let newCellHeight = 1\n      let wide = false\n\n      if (cellWidth > 60) {\n        newCellHeight += Math.round(cellWidth * 0.75)\n        wide = true\n      } else {\n        newCellHeight += Math.round(cellWidth)\n      }\n\n      dispatch({ type: 'setIsWide', value: wide })\n      dispatch({ type: 'setCellHeight', value: newCellHeight })\n    }\n\n    window.addEventListener('resize', handleResize)\n    handleResize()\n\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return {\n    startDate,\n    endDate,\n    cellHeight,\n    containerElementRef,\n    offset,\n    origin,\n    transition,\n    isWide\n  }\n}\n","export const START_DATE = 'startDate'\nexport const END_DATE = 'endDate'\nexport const ORIGIN_BOTTOM = 'bottom'\nexport const ORIGIN_TOP = 'top'\n","import React, { useMemo } from 'react'\nimport { eachDayOfInterval, endOfWeek, startOfWeek, format, Locale, startOfDay } from 'date-fns'\n\nexport interface CalendarWeekHeaderProps {\n  locale: Locale\n  weekdayFormat?: string\n}\n\nexport function CalendarWeekHeader({\n  locale,\n  weekdayFormat = 'eee'\n}: CalendarWeekHeaderProps): React.JSX.Element {\n  const today = startOfDay(new Date()).getDate()\n\n  const weekDays = useMemo(\n    () =>\n      eachDayOfInterval({\n        start: startOfWeek(today, { locale }),\n        end: endOfWeek(today, { locale })\n      }).map(date => format(date, weekdayFormat, { locale })),\n    [today, locale, weekdayFormat]\n  )\n\n  return (\n    <div className='nice-dates-week-header'>\n      {weekDays.map(day => (\n        <span key={day} className='nice-dates-week-header_day'>\n          {day}\n        </span>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\nimport { startOfMonth } from 'date-fns'\nimport { isSelectable, mergeModifiers } from './utils'\nimport { useControllableState } from './useControllableState'\nimport { CalendarNavigation } from './CalendarNavigation'\nimport { CalendarWeekHeader } from './CalendarWeekHeader'\nimport { CalendarGrid } from './CalendarGrid'\nimport { CommonProps, DateChangeCallBack } from './types'\n\nexport interface CalendarProps extends CommonProps {\n  month?: Date | null\n  onMonthChange?: DateChangeCallBack<Date>\n  onDayHover?: DateChangeCallBack\n  onDayClick?: DateChangeCallBack<Date>\n  touchDragEnabled?: boolean\n}\n\nexport function Calendar({\n  locale,\n  month: receivedMonth = null,\n  modifiers: receivedModifiers,\n  modifiersClassNames,\n  minimumDate = null,\n  maximumDate = null,\n  onMonthChange,\n  onDayHover,\n  onDayClick,\n  weekdayFormat,\n  touchDragEnabled\n}: CalendarProps): React.JSX.Element {\n  const [month, setMonth] = useControllableState(\n    receivedMonth,\n    onMonthChange,\n    startOfMonth(new Date())\n  )\n\n  const modifiers = mergeModifiers(\n    { disabled: date => !isSelectable(date, { minimumDate, maximumDate }) },\n    receivedModifiers\n  )\n\n  return (\n    <div>\n      <CalendarNavigation\n        locale={locale}\n        minimumDate={minimumDate}\n        maximumDate={maximumDate}\n        month={month}\n        onMonthChange={setMonth}\n      />\n\n      <CalendarWeekHeader locale={locale} weekdayFormat={weekdayFormat} />\n\n      <CalendarGrid\n        locale={locale}\n        modifiers={modifiers}\n        modifiersClassNames={modifiersClassNames}\n        month={month}\n        onMonthChange={setMonth}\n        onDayHover={onDayHover}\n        onDayClick={onDayClick}\n        touchDragEnabled={touchDragEnabled}\n      />\n    </div>\n  )\n}\n","import { differenceInDays, isAfter, isBefore, startOfDay, set } from 'date-fns'\nimport { ModifierMatcher } from './types'\n\nexport const isSelectable = (\n  date: Date,\n  {\n    minimumDate,\n    maximumDate\n  }: {\n    minimumDate?: Date | null\n    maximumDate?: Date | null\n  }\n): boolean =>\n  Boolean(\n    !(minimumDate && isBefore(date, startOfDay(minimumDate))) &&\n      !(maximumDate && isAfter(date, maximumDate))\n  )\n\nexport const mergeModifiers = (\n  baseModifiers: Record<string, ModifierMatcher>,\n  newModifiers?: Record<string, ModifierMatcher>\n): Record<string, ModifierMatcher> => {\n  if (!newModifiers) {\n    return baseModifiers\n  }\n\n  return Object.fromEntries(\n    Object.entries(newModifiers).map(([name, newModifier]) => {\n      const baseModifier = baseModifiers[name]\n      return [name, baseModifier ? date => baseModifier(date) || newModifier(date) : newModifier]\n    })\n  )\n}\n\nexport const setTime = (date: Date, dateWithTime: Date): Date =>\n  set(date, {\n    hours: dateWithTime.getHours(),\n    minutes: dateWithTime.getMinutes(),\n    seconds: dateWithTime.getSeconds()\n  })\n\nexport const isRangeLengthValid = (\n  { startDate, endDate }: { startDate: Date; endDate: Date },\n  { minimumLength, maximumLength }: { minimumLength: number; maximumLength?: number }\n): boolean =>\n  differenceInDays(startOfDay(endDate), startOfDay(startDate)) >= minimumLength &&\n  (!maximumLength || differenceInDays(startOfDay(endDate), startOfDay(startDate)) <= maximumLength)\n","import { useState } from 'react'\n\nexport function useControllableState<T>(\n  value: T,\n  onChange: ((value: T) => void) | null | undefined\n): [T, (value: T) => void]\nexport function useControllableState<T>(\n  value: T | null,\n  onChange: ((value: T) => void) | null | undefined,\n  initialValue: T\n): [T, (value: T) => void]\nexport function useControllableState<T>(\n  value: T,\n  onChange: ((value: T) => void) | null | undefined,\n  initialValue?: T\n): [T, (value: T) => void] {\n  const [state, setState] = useState(initialValue)\n\n  return onChange\n    ? [initialValue != null && value == null ? initialValue : value, onChange]\n    : [state as T, setState]\n}\n","import React from 'react'\nimport { isSameDay, startOfMonth } from 'date-fns'\nimport { isSelectable, mergeModifiers, setTime } from './utils'\nimport { useControllableState } from './useControllableState'\nimport { Calendar } from './Calendar'\nimport { CommonProps, DateChangeCallBack } from './types'\n\nexport interface DatePickerCalendarProps extends CommonProps {\n  date?: Date | null\n  month?: Date | null\n  onDateChange?: DateChangeCallBack<Date>\n  onMonthChange?: DateChangeCallBack<Date>\n  touchDragEnabled?: boolean\n}\n\nexport function DatePickerCalendar({\n  locale,\n  date: selectedDate = null,\n  month: receivedMonth = null,\n  onDateChange,\n  onMonthChange,\n  minimumDate,\n  maximumDate,\n  modifiers: receivedModifiers,\n  modifiersClassNames,\n  weekdayFormat,\n  touchDragEnabled\n}: DatePickerCalendarProps): React.JSX.Element {\n  const isSelected = (date: Date) =>\n    Boolean(\n      selectedDate &&\n        isSameDay(date, selectedDate) &&\n        isSelectable(date, { minimumDate, maximumDate })\n    )\n  const modifiers = mergeModifiers(\n    { selected: isSelected, disabled: isSelected },\n    receivedModifiers\n  )\n  const [month, setMonth] = useControllableState(\n    receivedMonth,\n    onMonthChange,\n    startOfMonth(selectedDate || new Date())\n  )\n\n  const handleDateChange = (date: Date) => {\n    onDateChange?.(selectedDate ? setTime(date, selectedDate) : date)\n  }\n\n  return (\n    <Calendar\n      locale={locale}\n      month={month}\n      onMonthChange={setMonth}\n      onDayClick={handleDateChange}\n      minimumDate={minimumDate}\n      maximumDate={maximumDate}\n      modifiers={modifiers}\n      modifiersClassNames={modifiersClassNames}\n      weekdayFormat={weekdayFormat}\n      touchDragEnabled={touchDragEnabled}\n    />\n  )\n}\n","import React, { useState } from 'react'\nimport { differenceInDays, isSameDay, isAfter, isBefore, startOfMonth, startOfDay } from 'date-fns'\nimport { isRangeLengthValid, isSelectable, mergeModifiers, setTime } from './utils'\nimport { START_DATE, END_DATE } from './constants'\nimport { useControllableState } from './useControllableState'\nimport { Calendar } from './Calendar'\nimport { CommonProps, DateChangeCallBack, DateRangeFocus } from './types'\n\nexport interface DateRangePickerCalendarProps extends CommonProps {\n  startDate?: Date | null\n  endDate?: Date | null\n  focus?: DateRangeFocus | null\n  month?: Date | null\n  minimumLength?: number\n  maximumLength?: number\n  onFocusChange?: (focus: DateRangeFocus | null) => void\n  onStartDateChange?: DateChangeCallBack\n  onEndDateChange?: DateChangeCallBack\n  onMonthChange?: DateChangeCallBack\n  touchDragEnabled?: boolean\n}\n\nconst defaultListener = () => {}\n\nexport function DateRangePickerCalendar({\n  locale,\n  startDate = null,\n  endDate = null,\n  focus = null,\n  month: receivedMonth = null,\n  onStartDateChange = defaultListener,\n  onEndDateChange = defaultListener,\n  onFocusChange = defaultListener,\n  onMonthChange,\n  minimumDate,\n  maximumDate,\n  minimumLength = 0,\n  maximumLength,\n  modifiers: receivedModifiers,\n  modifiersClassNames,\n  weekdayFormat,\n  touchDragEnabled\n}: DateRangePickerCalendarProps): React.JSX.Element {\n  const [hoveredDate, setHoveredDate] = useState<Date | null>(null)\n  const [month, setMonth] = useControllableState(\n    receivedMonth,\n    onMonthChange,\n    startOfMonth(startDate || endDate || new Date())\n  )\n\n  const displayedStartDate =\n    focus === START_DATE && !startDate && endDate && hoveredDate && !isSameDay(hoveredDate, endDate)\n      ? hoveredDate\n      : startDate\n        ? startOfDay(startDate)\n        : null\n\n  const displayedEndDate =\n    focus === END_DATE && !endDate && startDate && hoveredDate && !isSameDay(hoveredDate, startDate)\n      ? hoveredDate\n      : endDate\n        ? startOfDay(endDate)\n        : null\n\n  const isStartDate = (date: Date) =>\n    Boolean(\n      displayedStartDate &&\n        displayedEndDate &&\n        isSameDay(date, displayedStartDate) &&\n        isBefore(date, displayedEndDate)\n    )\n  const isMiddleDate = (date: Date) =>\n    Boolean(\n      displayedStartDate &&\n        displayedEndDate &&\n        isAfter(date, displayedStartDate) &&\n        isBefore(date, displayedEndDate)\n    )\n  const isEndDate = (date: Date) =>\n    Boolean(\n      displayedStartDate &&\n        displayedEndDate &&\n        isSameDay(date, displayedEndDate) &&\n        isAfter(date, displayedStartDate)\n    )\n\n  const modifiers = mergeModifiers(\n    {\n      selected: date =>\n        Boolean(\n          isSelectable(date, { minimumDate, maximumDate }) &&\n            (isStartDate(date) ||\n              isMiddleDate(date) ||\n              isEndDate(date) ||\n              (startDate && isSameDay(date, startDate)) ||\n              (endDate && isSameDay(date, endDate)))\n        ),\n      selectedStart: isStartDate,\n      selectedMiddle: isMiddleDate,\n      selectedEnd: isEndDate,\n      disabled: date =>\n        Boolean(\n          (focus === START_DATE &&\n            endDate &&\n            ((differenceInDays(startOfDay(endDate), date) < minimumLength &&\n              (!startDate || !isAfter(date, startOfDay(endDate)))) ||\n              (!startDate &&\n                maximumLength &&\n                differenceInDays(startOfDay(endDate), date) > maximumLength))) ||\n            (focus === END_DATE &&\n              startDate &&\n              ((differenceInDays(date, startOfDay(startDate)) < minimumLength &&\n                (!endDate || !isBefore(date, startOfDay(startDate)))) ||\n                (!endDate &&\n                  maximumLength &&\n                  differenceInDays(date, startOfDay(startDate)) > maximumLength)))\n        )\n    },\n    receivedModifiers\n  )\n\n  const handleSelectDate = (date: Date) => {\n    if (focus === START_DATE) {\n      const invalidEndDate =\n        endDate &&\n        !isRangeLengthValid({ startDate: date, endDate }, { minimumLength, maximumLength })\n\n      if (invalidEndDate) {\n        onEndDateChange(null)\n      }\n\n      onStartDateChange(startDate ? setTime(date, startDate) : date)\n      onFocusChange(END_DATE)\n    } else if (focus === END_DATE) {\n      const invalidStartDate =\n        startDate &&\n        !isRangeLengthValid({ startDate, endDate: date }, { minimumLength, maximumLength })\n\n      if (invalidStartDate) {\n        onStartDateChange(null)\n      }\n\n      onEndDateChange(endDate ? setTime(date, endDate) : date)\n      onFocusChange(invalidStartDate || !startDate ? START_DATE : null)\n    }\n  }\n\n  return (\n    <Calendar\n      locale={locale}\n      month={month}\n      onMonthChange={setMonth}\n      onDayHover={setHoveredDate}\n      onDayClick={handleSelectDate}\n      minimumDate={minimumDate}\n      maximumDate={maximumDate}\n      modifiers={modifiers}\n      modifiersClassNames={modifiersClassNames}\n      weekdayFormat={weekdayFormat}\n      touchDragEnabled={touchDragEnabled}\n    />\n  )\n}\n","import React, { ReactNode } from 'react'\nimport classNames from 'classnames'\n\nexport interface PopoverProps {\n  children: ReactNode\n  open: boolean\n}\n\nexport const Popover = React.forwardRef<HTMLDivElement, PopoverProps>(function Popover(\n  { children, open },\n  ref\n): React.JSX.Element {\n  return (\n    <div className={classNames('nice-dates-popover', { '-open': open })} ref={ref}>\n      {children}\n    </div>\n  )\n})\n","import React, { useState } from 'react'\nimport { useDateInput } from './useDateInput'\nimport { useDetectTouch } from './useDetectTouch'\nimport { useOutsideClickHandler } from './useOutsideClickHandler'\nimport { DatePickerCalendar } from './DatePickerCalendar'\nimport { Popover } from './Popover'\nimport { CommonProps, DateChangeCallBack, InputProps } from './types'\n\nexport interface DatePickerChildrenProps {\n  inputProps: InputProps\n  focused: boolean\n}\n\nexport interface DatePickerProps extends CommonProps {\n  children: (props: DatePickerChildrenProps) => React.ReactNode\n  date?: Date | null\n  onDateChange?: DateChangeCallBack\n  format?: string\n  touchDragEnabled?: boolean\n}\n\nconst defaultOnDateChange = () => {}\n\nexport function DatePicker({\n  children,\n  locale,\n  date = null,\n  onDateChange = defaultOnDateChange,\n  format,\n  minimumDate,\n  maximumDate,\n  modifiers,\n  modifiersClassNames,\n  weekdayFormat,\n  touchDragEnabled\n}: DatePickerProps): React.JSX.Element {\n  const [month, setMonth] = useState(() => date || new Date())\n  const [focused, setFocused] = useState(false)\n  const isTouch = useDetectTouch()\n\n  const [inputRef, popoverRef] = useOutsideClickHandler<HTMLInputElement, HTMLDivElement>(() => {\n    if (focused) {\n      setFocused(false)\n    }\n  })\n\n  const inputProps = useDateInput({\n    date,\n    format,\n    locale,\n    minimumDate,\n    maximumDate,\n    onDateChange: date => {\n      onDateChange(date)\n      if (date) {\n        setMonth(date)\n      }\n    }\n  })\n\n  const handleDateChange = (date: Date) => {\n    onDateChange(date)\n    setFocused(false)\n  }\n\n  return (\n    <div className='nice-dates'>\n      {children({\n        inputProps: {\n          ...inputProps,\n          ref: inputRef,\n          onFocus: () => {\n            inputProps.onFocus()\n            setFocused(true)\n\n            if (isTouch && inputRef.current) {\n              inputRef.current.blur()\n            }\n          },\n          readOnly: isTouch\n        },\n        focused\n      })}\n\n      <Popover open={focused} ref={popoverRef}>\n        <DatePickerCalendar\n          locale={locale}\n          date={date}\n          month={month}\n          onDateChange={handleDateChange}\n          onMonthChange={setMonth}\n          minimumDate={minimumDate}\n          maximumDate={maximumDate}\n          modifiers={modifiers}\n          modifiersClassNames={modifiersClassNames}\n          weekdayFormat={weekdayFormat}\n          touchDragEnabled={touchDragEnabled}\n        />\n      </Popover>\n    </div>\n  )\n}\n","import { ChangeEvent, useEffect, useState } from 'react'\nimport { format, parse, isValid, Locale } from 'date-fns'\nimport { isSelectable } from './utils'\nimport { DateChangeCallBack } from './types'\n\nexport interface UseDateInputProps {\n  date?: Date | null\n  format?: string\n  locale: Locale\n  minimumDate?: Date | null\n  maximumDate?: Date | null\n  onDateChange: DateChangeCallBack\n  validate?: (date: Date) => boolean\n}\n\nexport interface UseDateInputReturn {\n  onFocus: () => void\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void\n  onBlur: () => void\n  placeholder: string\n  type: 'text'\n  value: string\n}\n\nexport function useDateInput({\n  date: selectedDate = null,\n  format: receivedFormatString,\n  locale,\n  minimumDate = null,\n  maximumDate = null,\n  onDateChange,\n  validate\n}: UseDateInputProps): UseDateInputReturn {\n  const formatString =\n    receivedFormatString || (locale.formatLong?.date({ width: 'short' }) as string)\n\n  const formatDate = (date: Date) => format(date, formatString, { locale })\n  const parseDate = (dateString: string) =>\n    parse(dateString, formatString, selectedDate || new Date())\n  const isValidAndSelectable = (date: Date | null): date is Date =>\n    (isValid as (date: unknown) => date is Date)(date) &&\n    isSelectable(date, { minimumDate, maximumDate }) &&\n    (!validate || validate(date))\n\n  const [value, setValue] = useState(() =>\n    isValidAndSelectable(selectedDate) ? formatDate(selectedDate) : ''\n  )\n  const [focused, setFocused] = useState(false)\n\n  const handleFocus = () => {\n    setFocused(true)\n  }\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value\n    const parsedDate = parseDate(newValue)\n    setValue(newValue)\n\n    if (isValidAndSelectable(parsedDate)) {\n      onDateChange(parsedDate)\n    }\n  }\n\n  const handleBlur = () => {\n    if (value) {\n      const parsedDate = parseDate(value)\n\n      if (isValidAndSelectable(parsedDate)) {\n        setValue(formatDate(parsedDate))\n      } else if (isValidAndSelectable(selectedDate)) {\n        setValue(formatDate(selectedDate))\n      } else {\n        setValue('')\n      }\n    } else if (selectedDate) {\n      onDateChange(null)\n    }\n\n    setFocused(false)\n  }\n\n  useEffect(() => {\n    if (!focused) {\n      // eslint-disable-next-line @eslint-react/hooks-extra/no-direct-set-state-in-use-effect\n      setValue(isValidAndSelectable(selectedDate) ? formatDate(selectedDate) : '')\n    }\n  }, [selectedDate, focused])\n\n  return {\n    onFocus: handleFocus,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    placeholder: formatString.toLowerCase(),\n    type: 'text',\n    value\n  }\n}\n","import { useEffect, useState } from 'react'\n\nexport function useDetectTouch(): boolean {\n  const [isTouch, setIsTouch] = useState(false)\n\n  useEffect(() => {\n    const handleTouch = () => setIsTouch(true)\n\n    document.addEventListener('touchstart', handleTouch, {\n      passive: true,\n      once: true\n    })\n    return () => document.removeEventListener('touchstart', handleTouch)\n  }, [])\n\n  return isTouch\n}\n","import { useRef, useEffect } from 'react'\n\nexport function useOutsideClickHandler<\n  TRefA extends Element = Element,\n  TRefB extends Element = Element,\n  TRefC extends Element = Element\n>(callback: () => void): [React.RefObject<TRefA>, React.RefObject<TRefB>, React.RefObject<TRefC>] {\n  const refA = useRef<TRefA>(null)\n  const refB = useRef<TRefB>(null)\n  const refC = useRef<TRefC>(null)\n  const callbackRef = useRef(callback)\n\n  useEffect(() => {\n    callbackRef.current = callback\n  }, [callback])\n\n  useEffect(() => {\n    const handleOutsideClick = (event: MouseEvent) => {\n      const target = event.target as Node | null\n      if (\n        (!refA.current || ('contains' in refA.current && !refA.current.contains(target))) &&\n        (!refB.current || ('contains' in refB.current && !refB.current.contains(target))) &&\n        (!refC.current || ('contains' in refC.current && !refC.current.contains(target)))\n      ) {\n        callbackRef.current()\n      }\n    }\n\n    document.addEventListener('click', handleOutsideClick, { passive: true })\n\n    return () => document.removeEventListener('click', handleOutsideClick)\n  }, [])\n\n  return [refA, refB, refC]\n}\n","import React, { useState } from 'react'\nimport { isRangeLengthValid } from './utils'\nimport { START_DATE, END_DATE } from './constants'\nimport { useDateInput } from './useDateInput'\nimport { useOutsideClickHandler } from './useOutsideClickHandler'\nimport { useDetectTouch } from './useDetectTouch'\nimport { DateRangePickerCalendar } from './DateRangePickerCalendar'\nimport { Popover } from './Popover'\nimport { CommonProps, DateChangeCallBack, DateRangeFocus, InputProps } from './types'\n\nexport interface DateRangePickerChildrenProps {\n  startDateInputProps: InputProps\n  endDateInputProps: InputProps\n  focus?: DateRangeFocus | null\n}\n\nexport interface DateRangePickerProps extends CommonProps {\n  children: (props: DateRangePickerChildrenProps) => React.ReactNode\n  startDate?: Date | null\n  endDate?: Date | null\n  minimumLength?: number\n  maximumLength?: number\n  onStartDateChange?: DateChangeCallBack\n  onEndDateChange?: DateChangeCallBack\n  format?: string\n  touchDragEnabled?: boolean\n}\n\nconst defaultListener = () => {}\n\nexport function DateRangePicker({\n  children,\n  locale,\n  startDate = null,\n  endDate = null,\n  onStartDateChange = defaultListener,\n  onEndDateChange = defaultListener,\n  format,\n  minimumDate,\n  maximumDate,\n  minimumLength = 0,\n  maximumLength,\n  modifiers,\n  modifiersClassNames,\n  weekdayFormat,\n  touchDragEnabled\n}: DateRangePickerProps): React.JSX.Element {\n  const [focus, setFocus] = useState<DateRangeFocus | null>(null)\n  const [month, setMonth] = useState<Date | null>(() => startDate || endDate || new Date())\n  const isTouch = useDetectTouch()\n\n  const [startDateInputRef, endDateInputRef, popoverRef] = useOutsideClickHandler<\n    HTMLInputElement,\n    HTMLInputElement,\n    HTMLDivElement\n  >(() => setFocus(null))\n\n  const startDateInputProps = useDateInput({\n    date: startDate,\n    format,\n    locale,\n    maximumDate,\n    minimumDate,\n    onDateChange: date => {\n      onStartDateChange(date)\n      if (date) {\n        setMonth(date)\n      }\n    },\n    validate: date =>\n      !endDate || isRangeLengthValid({ startDate: date, endDate }, { minimumLength, maximumLength })\n  })\n\n  const endDateInputProps = useDateInput({\n    date: endDate,\n    format,\n    locale,\n    maximumDate,\n    minimumDate,\n    onDateChange: date => {\n      onEndDateChange(date)\n      if (date) {\n        setMonth(date)\n      }\n    },\n    validate: date =>\n      !startDate ||\n      isRangeLengthValid({ startDate, endDate: date }, { minimumLength, maximumLength })\n  })\n\n  return (\n    <div className='nice-dates'>\n      {children({\n        startDateInputProps: {\n          ...startDateInputProps,\n          onFocus: () => {\n            startDateInputProps.onFocus()\n            setFocus(START_DATE)\n\n            if (isTouch && startDateInputRef.current) {\n              startDateInputRef.current.blur()\n            }\n          },\n          ref: startDateInputRef,\n          readOnly: isTouch\n        },\n        endDateInputProps: {\n          ...endDateInputProps,\n          onFocus: () => {\n            endDateInputProps.onFocus()\n            setFocus(END_DATE)\n\n            if (isTouch && endDateInputRef.current) {\n              endDateInputRef.current.blur()\n            }\n          },\n          ref: endDateInputRef,\n          readOnly: isTouch\n        },\n        focus\n      })}\n\n      <Popover open={!!focus} ref={popoverRef}>\n        <DateRangePickerCalendar\n          locale={locale}\n          startDate={startDate}\n          endDate={endDate}\n          focus={focus}\n          month={month}\n          onStartDateChange={onStartDateChange}\n          onEndDateChange={onEndDateChange}\n          onFocusChange={setFocus}\n          onMonthChange={setMonth}\n          minimumDate={minimumDate}\n          maximumDate={maximumDate}\n          minimumLength={minimumLength}\n          maximumLength={maximumLength}\n          modifiers={modifiers}\n          modifiersClassNames={modifiersClassNames}\n          weekdayFormat={weekdayFormat}\n          touchDragEnabled={touchDragEnabled}\n        />\n      </Popover>\n    </div>\n  )\n}\n"],"mappings":"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","names":["getDate","format","isToday","classNames","jsx","jsxs","defaultModifiersClassNames","defaultModifiers","defaultEventHandler","CalendarDay","date","height","locale","receivedModifiers","receivedModifiersClassNames","onClick","onHover","dayOfMonth","getDate","modifiers","__spreadValues","isToday","modifiersClassNames","dayClassNames","name","modifier","handleClick","event","handleMouseEnter","handleMouseLeave","classNames","format","classNames","addMonths","getYear","startOfMonth","subMonths","format","isSameMonth","jsx","jsxs","CalendarNavigation","locale","month","minimumDate","maximumDate","onMonthChange","handlePrevious","event","handleNext","eachDayOfInterval","isSameMonth","lightFormat","startOfMonth","classNames","useRef","useLayoutEffect","useEffect","useReducer","addMonths","addWeeks","differenceInCalendarMonths","differenceInCalendarWeeks","endOfMonth","endOfWeek","isAfter","isBefore","isSameMonth","startOfMonth","startOfWeek","subMonths","START_DATE","END_DATE","ORIGIN_BOTTOM","ORIGIN_TOP","rowsBetweenDates","startDate","endDate","locale","differenceInCalendarWeeks","rowsInMonth","date","startOfMonth","endOfMonth","getStartDate","startOfWeek","getEndDate","endOfWeek","addWeeks","createInitialState","currentMonth","ORIGIN_TOP","reducer","state","action","__spreadProps","__spreadValues","lastCurrentMonth","cellHeight","newState","isAfter","offset","isBefore","gridHeight","ORIGIN_BOTTOM","useGrid","onMonthChange","transitionDuration","touchDragEnabled","timeoutRef","useRef","containerElementRef","initialDragPositionRef","origin","transition","isWide","dispatch","useReducer","useLayoutEffect","notDragging","isSameMonth","containerElement","differenceInCalendarMonths","halfGridHeight","handleDragStart","event","_a","computedOffset","currentMonthPosition","newStartDate","subMonths","addMonths","handleDrag","initialDragPosition","dragOffset","previousMonth","previousMonthPosition","nextMonth","nextMonthPosition","newCurrentMonthPosition","shouldChangeToNextMonth","shouldChangeToPreviousMonth","handleDragEnd","useEffect","handleResize","cellWidth","newCellHeight","wide","jsx","computeModifiers","modifiers","date","key","modifierMatcher","defaultModifiers","CalendarGrid","locale","month","modifiersClassNames","onMonthChange","onDayHover","onDayClick","transitionDuration","touchDragEnabled","startDate","endDate","cellHeight","containerElementRef","isWide","offset","origin","transition","useGrid","startOfMonth","days","eachDayOfInterval","CalendarDay","__spreadProps","__spreadValues","isSameMonth","lightFormat","classNames","ORIGIN_BOTTOM","ORIGIN_TOP","useMemo","eachDayOfInterval","endOfWeek","startOfWeek","format","startOfDay","jsx","CalendarWeekHeader","locale","weekdayFormat","today","weekDays","date","day","startOfMonth","differenceInDays","isAfter","isBefore","startOfDay","set","isSelectable","date","minimumDate","maximumDate","mergeModifiers","baseModifiers","newModifiers","name","newModifier","baseModifier","setTime","dateWithTime","isRangeLengthValid","startDate","endDate","minimumLength","maximumLength","useState","useControllableState","value","onChange","initialValue","state","setState","jsx","jsxs","Calendar","locale","receivedMonth","receivedModifiers","modifiersClassNames","minimumDate","maximumDate","onMonthChange","onDayHover","onDayClick","weekdayFormat","touchDragEnabled","month","setMonth","useControllableState","startOfMonth","modifiers","mergeModifiers","date","isSelectable","CalendarNavigation","CalendarWeekHeader","CalendarGrid","isSameDay","startOfMonth","jsx","DatePickerCalendar","locale","selectedDate","receivedMonth","onDateChange","onMonthChange","minimumDate","maximumDate","receivedModifiers","modifiersClassNames","weekdayFormat","touchDragEnabled","isSelected","date","isSameDay","isSelectable","modifiers","mergeModifiers","month","setMonth","useControllableState","startOfMonth","Calendar","setTime","useState","differenceInDays","isSameDay","isAfter","isBefore","startOfMonth","startOfDay","jsx","defaultListener","DateRangePickerCalendar","locale","startDate","endDate","focus","receivedMonth","onStartDateChange","onEndDateChange","onFocusChange","onMonthChange","minimumDate","maximumDate","minimumLength","maximumLength","receivedModifiers","modifiersClassNames","weekdayFormat","touchDragEnabled","hoveredDate","setHoveredDate","useState","month","setMonth","useControllableState","startOfMonth","displayedStartDate","START_DATE","isSameDay","startOfDay","displayedEndDate","END_DATE","isStartDate","date","isBefore","isMiddleDate","isAfter","isEndDate","modifiers","mergeModifiers","isSelectable","differenceInDays","Calendar","isRangeLengthValid","setTime","invalidStartDate","React","classNames","jsx","Popover","children","open","ref","useState","useEffect","useState","format","parse","isValid","useDateInput","selectedDate","receivedFormatString","locale","minimumDate","maximumDate","onDateChange","validate","_a","formatString","formatDate","date","format","parseDate","dateString","parse","isValidAndSelectable","isValid","isSelectable","value","setValue","useState","focused","setFocused","handleFocus","handleChange","event","newValue","parsedDate","handleBlur","useEffect","useEffect","useState","useDetectTouch","isTouch","setIsTouch","handleTouch","useRef","useEffect","useOutsideClickHandler","callback","refA","refB","refC","callbackRef","handleOutsideClick","event","target","jsx","jsxs","defaultOnDateChange","DatePicker","children","locale","date","onDateChange","format","minimumDate","maximumDate","modifiers","modifiersClassNames","weekdayFormat","touchDragEnabled","month","setMonth","useState","focused","setFocused","isTouch","useDetectTouch","inputRef","popoverRef","useOutsideClickHandler","inputProps","useDateInput","handleDateChange","__spreadProps","__spreadValues","Popover","DatePickerCalendar","useState","jsx","jsxs","defaultListener","DateRangePicker","children","locale","startDate","endDate","onStartDateChange","onEndDateChange","format","minimumDate","maximumDate","minimumLength","maximumLength","modifiers","modifiersClassNames","weekdayFormat","touchDragEnabled","focus","setFocus","useState","month","setMonth","isTouch","useDetectTouch","startDateInputRef","endDateInputRef","popoverRef","useOutsideClickHandler","startDateInputProps","useDateInput","date","isRangeLengthValid","endDateInputProps","__spreadProps","__spreadValues","START_DATE","END_DATE","Popover","DateRangePickerCalendar"]}